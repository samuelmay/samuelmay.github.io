<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About on Samuel May</title>
    <link>https://samuelmay.github.io/</link>
    <description>Recent content in About on Samuel May</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Oct 2022 16:54:26 +1100</lastBuildDate><atom:link href="https://samuelmay.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I got a Framework Laptop</title>
      <link>https://samuelmay.github.io/posts/framework/</link>
      <pubDate>Thu, 13 Oct 2022 16:54:26 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/framework/</guid>
      
        <description>I&amp;rsquo;ve been following the Framework laptop since it was announced. A few weeks ago I finally got the email that they were taking pre-orders in Australia. I jumped right on it. Yesterday, it arrived!
I (of course) got the DIY edition with an SSD and memory stick included separately. It arrived with a Torx screwdriver included and the laptop components in their OEM packaging.
You loosen 5 screws on the bottom (they&amp;rsquo;re captive, so there&amp;rsquo;s no opportunity to lose them), turn it over, and gently pry off the keyboard panel.</description>
      
    </item>
    
    <item>
      <title>Version the god-damned database</title>
      <link>https://samuelmay.github.io/posts/version_the_database/</link>
      <pubDate>Thu, 08 Sep 2022 09:14:14 +1000</pubDate>
      
      <guid>https://samuelmay.github.io/posts/version_the_database/</guid>
      
        <description>Graph-based version control is, I think, one of the most powerful organisational concepts that has emerged from computer programming practice. With Git (or another modern SCM) engineers have superpowers for dealing with change management.
However, the long-suffering database doesn&amp;rsquo;t seem to get as much love in the modern CI/CD pipeline. Certainly all sorts of useful things can be done, but usually they aren&amp;rsquo;t. I&amp;rsquo;ve heard that traditional relational database skills are in decline - maybe that&amp;rsquo;s the case.</description>
      
    </item>
    
    <item>
      <title>Rust Australia Sydney meetup</title>
      <link>https://samuelmay.github.io/posts/rustau_july_2022/</link>
      <pubDate>Fri, 22 Jul 2022 09:33:25 +1000</pubDate>
      
      <guid>https://samuelmay.github.io/posts/rustau_july_2022/</guid>
      
        <description>Last Tuesday I tuned in for the Rust Australia virtual meetup. I don&amp;rsquo;t think it&amp;rsquo;s the inaugural one, but it&amp;rsquo;s the first one post-pandemic. Well done to the organisers. There&amp;rsquo;s talk of a physical meetup in September, which I look forward to. The stream was organised on Twitch with discussion on Discord, and the rapid-fire stream of reaction emojis was defnitely more hip than I&amp;rsquo;m used to for software presentations!</description>
      
    </item>
    
    <item>
      <title>My current thoughts on the most useful parts of Agile development</title>
      <link>https://samuelmay.github.io/posts/my_agile_interpretation/</link>
      <pubDate>Tue, 21 Jun 2022 10:23:00 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/my_agile_interpretation/</guid>
      
        <description>In real life, if you sprint repeatedly with small pauses in between, that&amp;rsquo;s not sustatinable, that&amp;rsquo;s &amp;lsquo;interval training&amp;rsquo;, which is a method to drive yourself to exhaustion in the shortest possible time! I think language actually has a really important role in influencing our expectations and mindset. I would prefer to call iterations &amp;lsquo;jogs&amp;rsquo; or &amp;rsquo;laps&amp;rsquo; to express the endurance that should be expected. Or simply, &amp;lsquo;iterations&amp;rsquo;.
The infamous daily stand-up meeting can definitely have value, but it usually snowballs out of control into a ramble that takes up most of an hour.</description>
      
    </item>
    
    <item>
      <title>Automating the deployment of this website</title>
      <link>https://samuelmay.github.io/posts/deploying_this_site/</link>
      <pubDate>Wed, 06 Apr 2022 17:01:01 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/deploying_this_site/</guid>
      
        <description>After some previous adventures getting this Hugo site up and running, I had a working but annoying process where I would edit the site in my web projects repo (with Hugo in live server mode) then publish it across to the GitHub Pages repo with hugo -d ..\samuelmay.github.io. Then I had to commit to the web projects repo to save the work, and separately commit and push the GitHub Pages repo to deploy the site.</description>
      
    </item>
    
    <item>
      <title>Static website subresource integrity and text file line endings</title>
      <link>https://samuelmay.github.io/posts/checksums_git_crlf/</link>
      <pubDate>Sun, 03 Apr 2022 14:08:24 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/checksums_git_crlf/</guid>
      
        <description>When I was creating this site and playing around with Hugo, I encountered this issue for the Anatole theme. Hugo is thorough enough when it minifies resource files to add &amp;lsquo;integrity&amp;rsquo; attributes with calculated checksums for the minified files.
Now when you&amp;rsquo;re using GitHub pages or another web host that serves the content out of a Git repository, it turns out the operating system that the web host is running actually matters.</description>
      
    </item>
    
    <item>
      <title>.NET 6 with top-to-bottom async C#</title>
      <link>https://samuelmay.github.io/posts/dotnet-6-async/</link>
      <pubDate>Tue, 29 Mar 2022 12:18:31 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/dotnet-6-async/</guid>
      
        <description>Recently I started a new project with all the latest .NET shiny bits. Visual Studio 2022, .NET 6, Dapper as the object mapper and every damn function from top to bottom marked as async. It absolutely flies and the performance goes down great in demos. Razor is a perfectly fine templating system, the dependency injection mostly just works, and I even appreciate the &amp;lsquo;$&amp;rsquo; string interpolation. I have to say productivity with a basic server-rendered app has been noticeably higher than trying to iterate an full Angular SPA and backend API with a small team.</description>
      
    </item>
    
    <item>
      <title>Book review: &#34;Kill It With Fire&#34; by Marianne Bellotti</title>
      <link>https://samuelmay.github.io/posts/kill_it_with_fire_book/</link>
      <pubDate>Sat, 26 Mar 2022 13:00:06 +1100</pubDate>
      
      <guid>https://samuelmay.github.io/posts/kill_it_with_fire_book/</guid>
      
        <description>Kill It with Fire: Manage aging computer systems (and future proof modern ones)
This book has a lot of good advice and insight, that is unfortunately very relevant to some of the work I&amp;rsquo;m doing right now.
I liked the consideration of &amp;lsquo;momentum&amp;rsquo; and how to maintain it to avoid the cycle of half-assed rewrites and migrations that are never quite finished.
There&amp;rsquo;s an anecdote about how one US government team, working on immigration application software was using &amp;lsquo;Refugees saved from ISIS&amp;rsquo; as a metric.</description>
      
    </item>
    
  </channel>
</rss>